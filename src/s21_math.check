#include <math.h>
#include <stdlib.h>
#include "s21_math.h"

#test abs_test
    for (int i = -123456; i < 123456; i += 10) {
    	ck_assert_int_eq(s21_abs(i), abs(i));
    }
    ck_assert_int_eq(s21_abs(0), abs(0));
    ck_assert_int_eq(s21_abs(-0), abs(-0));
    ck_assert_int_eq(s21_abs(123), abs(123));
    ck_assert_int_eq(s21_abs(-99), abs(-99));
  

#test fabs_test
    ck_assert_uint_eq(s21_fabs(-612367.54783), fabs(-612367.54783));
    ck_assert_uint_eq(s21_fabs(-45.877), fabs(-45.877));
    ck_assert_uint_eq(s21_fabs(2.0), fabs(2.0));
    ck_assert_uint_eq(s21_fabs(s21_N_NAN), fabs(s21_N_NAN));
    ck_assert_uint_eq(s21_fabs(s21_INF), fabs(s21_INF));

#test ceil_test
    ck_assert_ldouble_eq(s21_ceil(-11.64), ceil(-11.64));
    ck_assert_ldouble_eq(s21_ceil(18.59), ceil(18.59));
    ck_assert_ldouble_eq(s21_ceil(100), ceil(100));
    ck_assert_ldouble_eq(s21_ceil(100000001.0000001), ceil(100000001.0000001));
    ck_assert_ldouble_eq(s21_ceil(-0.0000001), ceil(-0.0000001));
    ck_assert_ldouble_eq(s21_ceil(-12.999999999), ceil(-12.999999999));


#test floor_test
    ck_assert_ldouble_eq(s21_floor(-11.64), floor(-11.64));
    ck_assert_ldouble_eq(s21_floor(18.59), floor(18.59));
    ck_assert_ldouble_eq(s21_floor(100), floor(100));
    ck_assert_ldouble_eq(s21_floor(100000001.0000001), floor(100000001.0000001));
    ck_assert_ldouble_eq(s21_floor(-0.0000001), floor(-0.0000001));
    ck_assert_ldouble_eq(s21_floor(-12.999999999), floor(-12.999999999));
    ck_assert_uint_eq(s21_floor(s21_N_NAN), floor(s21_N_NAN));
    ck_assert_uint_eq(s21_floor(s21_INF), floor(s21_INF));

#test cos_test
    ck_assert_ldouble_eq_tol(s21_cos(0), cos(0), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(s21_PI), cos(s21_PI), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(s21_PI / 3), cos(s21_PI / 3), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(s21_PI / 6), cos(s21_PI / 6), 1e-6);
    //ck_assert_ldouble_eq_tol(s21_cos(s21_PI / 2), cos(s21_PI / 2), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(s21_PI / 4), cos(s21_PI / 4), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(-s21_PI / 4), cos(-s21_PI / 4), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(-s21_PI / 2), cos(-s21_PI / 2), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(-s21_PI / 3), cos(-s21_PI / 3), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(-s21_PI / 6), cos(-s21_PI / 6), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(2 * s21_PI / 3), cos(2 * s21_PI / 3), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(5 * s21_PI / 6), cos(5 * s21_PI / 6), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(2 * s21_PI / 4), cos(2 * s21_PI / 4), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(3 * s21_PI / 4), cos(3 * s21_PI / 4), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(12345), cos(12345), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(-6789), cos(-6789), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(126.8647465), cos(126.8647465), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(-235.3456458), cos(-235.3456458), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(75846.8647465), cos(75846.8647465), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(-92553.3456458), cos(-92553.3456458), 1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(5659782464.8647465), cos(5659782464.8647465),
                           1e-6);
    ck_assert_ldouble_eq_tol(s21_cos(-5237385933.3456458),
                           cos(-5237385933.3456458), 1e-6);

#test sin_test
  ck_assert_ldouble_eq_tol(s21_sin(0), sin(0), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(s21_PI), sin(s21_PI), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(s21_PI / 3), sin(s21_PI / 3), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(s21_PI / 6), sin(s21_PI / 6), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(s21_PI / 2), sin(s21_PI / 2), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(s21_PI / 4), sin(s21_PI / 4), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(-s21_PI / 4), sin(-s21_PI / 4), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(-s21_PI / 2), sin(-s21_PI / 2), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(-s21_PI / 3), sin(-s21_PI / 3), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(-s21_PI / 6), sin(-s21_PI / 6), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(2 * s21_PI / 3), sin(2 * s21_PI / 3), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(5 * s21_PI / 6), sin(5 * s21_PI / 6), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(2 * s21_PI / 4), sin(2 * s21_PI / 4), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(3 * s21_PI / 4), sin(3 * s21_PI / 4), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(12345), sin(12345), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(-6789), sin(-6789), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(126.8647465), sin(126.8647465), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(-235.3456458), sin(-235.3456458), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(75846.8647465), sin(75846.8647465), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(-92553.3456458), sin(-92553.3456458), 1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(5659782464.8647465), sin(5659782464.8647465),
                           1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(-5237385933.3456458),
                           sin(-5237385933.3456458), 1e-6);

#test tan_test
  ck_assert_ldouble_eq_tol(s21_tan(0),tan(0), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(s21_PI), tan(s21_PI), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(s21_PI / 3), tan(s21_PI / 3), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(s21_PI / 6), tan(s21_PI / 6), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(s21_PI / 4), tan(s21_PI / 4), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(-s21_PI / 4), tan(-s21_PI / 4), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(-s21_PI / 3), tan(-s21_PI / 3), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(-s21_PI / 6), tan(-s21_PI / 6), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(2 * s21_PI / 3), tan(2 * s21_PI / 3), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(5 * s21_PI / 6), tan(5 * s21_PI / 6), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(3 * s21_PI / 4), tan(3 * s21_PI / 4), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(12345), tan(12345), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(-6789), tan(-6789), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(126.8647465), tan(126.8647465), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(-235.3456458), tan(-235.3456458), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(75846.8647465), tan(75846.8647465), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(-92553.3456458), tan(-92553.3456458), 1e-6);
  ck_assert_ldouble_eq_tol(s21_tan(5659782464.8647465), tan(5659782464.8647465),
                           1e-6);
  ck_assert_ldouble_eq_tol(s21_sin(-5237385933.3456458),
                           sin(-5237385933.3456458), 1e-6);

#test fmod_test
    ck_assert_ldouble_eq_tol(s21_fmod(1, 2), fmod(1, 2), 1e-6);
    ck_assert_ldouble_eq_tol(s21_fmod(145.4673, 12.3), fmod(145.4673, 12.3), 1e-6);
    ck_assert_ldouble_eq_tol(s21_fmod(4, 2), fmod(4, 2), 1e-6);
    ck_assert_ldouble_eq_tol(s21_fmod(0, 1), fmod(0, 1), 1e-6);
    ck_assert_ldouble_eq_tol(s21_fmod(-12.67, 3.4), fmod(-12.67, 3.4), 1e-6);
    ck_assert_ldouble_eq_tol(s21_fmod(-12.67, s21_INF), fmod(-12.67, s21_INF), 1e-6);
    ck_assert_ldouble_eq_tol(s21_fmod(13, s21_INF), fmod(13, s21_INF), 1e-6);   
    ck_assert_int_eq(isnan(s21_fmod(1, 0.0)), 1);
    ck_assert_int_eq(isnan(s21_fmod(s21_INF, 5)), 1);
    ck_assert_int_eq(isnan(s21_fmod(s21_NAN, 5)), 1);
    ck_assert_int_eq(isnan(s21_fmod(5, s21_NAN)), 1);

#test asin_test
    ck_assert_double_eq_tol(s21_asin(-1), asin(-1), 1e-6);
    ck_assert_double_eq_tol(s21_asin(1), asin(1), 1e-6);
    ck_assert_double_eq_tol(s21_asin(0.2), asin(0.2), 1e-6);
    ck_assert_int_eq(isnan(s21_asin(2)), 1);
    ck_assert_double_eq_tol(s21_asin(0), asin(0), 1e-6);
    ck_assert_int_eq(isnan(s21_asin(s21_NAN)), 1);

#test acos_test
    ck_assert_double_eq_tol(s21_acos(-1), acos(-1), 1e-6);
    ck_assert_double_eq_tol(s21_acos(1), acos(1), 1e-6);
    ck_assert_double_eq_tol(s21_acos(0.2), acos(0.2), 1e-6);
    ck_assert_int_eq(isnan(s21_acos(2)), 1);
    ck_assert_double_eq_tol(s21_acos(0), acos(0), 1e-6);
    ck_assert_int_eq(isnan(s21_acos(s21_NAN)), 1);

#test atan_test
    ck_assert_double_eq_tol(s21_atan(-1), atan(-1), 1e-6);
    ck_assert_double_eq_tol(s21_atan(1), atan(1), 1e-6);
    ck_assert_double_eq_tol(s21_atan(10), atan(10), 1e-6);
    ck_assert_double_eq_tol(s21_atan(0x14BD), atan(0x14BD), 1e-6);
    ck_assert_double_eq_tol(s21_atan(0), atan(0), 1e-6);
    ck_assert_double_eq_tol(s21_atan(145), atan(145), 1e-6);
    ck_assert_double_eq_tol(s21_atan(16), atan(16), 1e-6);
    ck_assert_double_eq_tol(s21_atan(145986), atan(145986), 1e-6);
    ck_assert_int_eq(isnan(s21_atan(s21_NAN)), 1);

#test log_test1
    double num = 456.789;
    long double orig_res = log(num);
    long double our_res = s21_log(num);
    int suc = 0;
    if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
    ck_assert_int_eq(1, suc);

#test log_test2
    double num = NAN;
    long double orig_res = log(num);
    long double our_res = s21_log(num);
    int suc = 0;
    if (isnan(our_res) && isnan(orig_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test log_test3
    double num = 0.001;
    long double orig_res = log(num);
    long double our_res = s21_log(num);
    int suc = 0;
    if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
    ck_assert_int_eq(1, suc);

#test log_test4
    double num = 0.4;
    long double orig_res = log(num);
    long double our_res = s21_log(num);
    int suc = 0;
    if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
    ck_assert_int_eq(1, suc);

#test log_test5
    double num = s21_NINF;
    long double orig_res = log(num);
    long double our_res = s21_log(num);
    int suc = 0;
    if (isnan(our_res) && isnan(orig_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test log_test6
    double num = s21_INF;
    long double orig_res = log(num);
    long double our_res = s21_log(num);
    int suc = 0;
    if (isinf(our_res) && isinf(orig_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test log_test7
    ck_assert_ldouble_infinite(s21_log(s21_INF));
    ck_assert_ldouble_infinite(log(s21_INF));
    ck_assert_ldouble_nan(s21_log(s21_NINF));
    ck_assert_ldouble_nan(log(s21_NINF));
    ck_assert_ldouble_nan(s21_log(NAN));
    ck_assert_ldouble_nan(log(NAN));
    ck_assert_ldouble_eq_tol(s21_log(1.0), log(1.0), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1), log(1.1), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(0.5), log(0.5), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1), log(1), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(100), log(100), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(0.5), log(0.5), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(0.5), log(0.5), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(DBL_MAX), log(DBL_MAX), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(s21_PI / 3), log(s21_PI / 3), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(9.234578353457e-6), log(9.234578353457e-6),
                           1e-6);
    ck_assert_ldouble_eq_tol(s21_log(9.234578353457e6), log(9.234578353457e6),
                           1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1234567.000000004), log(1234567.000000004),
                           1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-16), log(1.1e-16), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-45), log(1.1e-45), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-18), log(1.1e-18), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-19), log(1.1e-19), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-23), log(1.1e-23), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(987654321123.123e-30),
                           log(987654321123.123e-30), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(98765.123e-11), log(98765.123e-11), 1e-6);
    ck_assert_ldouble_infinite(s21_log(0));
    ck_assert_ldouble_infinite(log(0));
    ck_assert_ldouble_eq_tol(s21_log(1.1e-17), log(1.1e-17), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-15), log(1.1e-15), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-14), log(1.1e-14), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-13), log(1.1e-13), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-12), log(1.1e-12), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-11), log(1.1e-11), 1e-6);
    ck_assert_ldouble_eq_tol(s21_log(1.1e-80), log(1.1e-80), 1e-6);

#test exp_test1
    double x = 0;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test2
    double x = 1;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test3
    double x = 2;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test4
    double x = 3;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test5
    double x = 1.5;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test6
    double x = -1.5;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test7
    double x = 0.5;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test8
    double x = -0.5;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test9
    double x = 715;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test10
    double x = -715;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test11
    double x = -0;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test12
    double x = 'A';
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test13
    double x = -'N';
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test14
    double x = -'V';
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test15
    double x = +'B';
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test16
    double x = 0 / 1;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test17
    double x = 0 / 1;
    ck_assert_int_eq(s21_exp(x), exp(x));

#test exp_test18
    ck_assert_float_eq(s21_exp(2), exp(2));
    ck_assert_float_eq(s21_exp(-750), exp(-750));
    ck_assert_float_eq(s21_exp(-2), exp(-2));

#test exp_test19
    double num = NAN;
    long double orig_res = exp(num), our_res = s21_exp(num);
    int suc = 0;
    if (isnan(orig_res) && isnan(our_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test exp_test20
    double num = s21_INF;
    long double orig_res = exp(num), our_res = s21_exp(num);
    int suc = 0;
    if (isinf(orig_res) && isinf(our_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test exp_test21
    double num = s21_NINF;
    long double orig_res = exp(num), our_res = s21_exp(num);
    int suc = 0;
    if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
    ck_assert_int_eq(1, suc);

#test exp_test22
    double x = 0.0;
    ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test exp_test23
    ck_assert_ldouble_eq_tol(s21_exp(s21_NINF), expl(s21_NINF), 1e-06);
    ck_assert_ldouble_infinite(s21_exp(s21_INF));
    ck_assert_ldouble_infinite(expl(s21_INF));
    ck_assert_ldouble_nan(s21_exp(NAN));
    ck_assert_ldouble_nan(expl(NAN));

#test exp_test24
    double x = 0.0;
    ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test exp_test25
    double x = -1.0;
    ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test exp_test26
    double x = -100;
    ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test exp_test27
    double x = -1000000;
    ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test exp_test28
    double x = 1;
    ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test exp_test29
    double num = 1000000;
    long double orig_res = exp(num), our_res = s21_exp(num);
    int suc = 0;
    if (isinf(orig_res) && isinf(our_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test pow_test1
    double num = 456.789;
    double ex = 1.1;
    long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
    int suc = 0;
    ck_assert_float_eq(our_res, orig_res);
    if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
    ck_assert_int_eq(1, suc);

#test pow_test2
    double num = s21_INF;
    double ex = 1.1;
    long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
    int suc = 0;
    if (isinf(our_res) && isinf(orig_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test pow_test3
    double num = NAN;
    double ex = 1.1;
    long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
    int suc = 0;
    if (isnan(our_res) && isnan(orig_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test pow_test4
    double num = NAN;
    double ex = NAN;
    long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
    int suc = 0;
    if (isnan(our_res) && isnan(orig_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test pow_test5
    double num = 0.001;
    double ex = NAN;
    long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
    int suc = 0;
    if (isnan(our_res) && isnan(orig_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test pow_test6
    double num = s21_INF;
    double ex = s21_INF;
    long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
    int suc = 0;
    if (isinf(our_res) && isinf(orig_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test pow_test7
    double num = s21_INF;
    double ex = s21_INF;
    long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
    int suc = 0;
    if (isinf(our_res) && isinf(orig_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test pow_test8
    ck_assert_ldouble_eq_tol(s21_pow(2.1, 11), pow(2.1, 11), 1e-6);

#test pow_test9
    long double base = -10.1261;
    long double exp = -0.72;
    ck_assert_double_nan(s21_pow(base, exp));
    ck_assert_double_nan(pow(base, exp));

#test pow_test10
    long double base = +0;
    long double exp = -0.33;
    ck_assert_ldouble_infinite(s21_pow(base, exp));
    ck_assert_ldouble_infinite(pow(base, exp));

#test pow_test11
    long double base = -0;
    long double exp = -0.33;
    ck_assert_ldouble_infinite(s21_pow(base, exp));
    ck_assert_ldouble_infinite(pow(base, exp));

#test pow_test12
    long double base = -0;
    long double exp = s21_INF;
    ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), s21_EPS);

#test pow_test13
    long double base = +0;
    long double exp = 123;
    ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_test14
    long double base = -0;
    long double exp = 123;
    ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_test15
    long double base = -0;
    long double exp = s21_INF;
    ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_test16
    long double base = -1;
    long double exp = s21_NAN;
    ck_assert_double_nan(pow(base, exp));
    ck_assert_double_nan(s21_pow(base, exp));

#test pow_test17
    ck_assert_ldouble_eq_tol(s21_pow(2.1234567, -2), pow(2.1234567, -2), 1e-6);
    ck_assert_ldouble_eq_tol(s21_pow(2.1234567, -2), pow(2.1234567, -2), 1e-6);

#test pow_test18
    long double base = -123;
    long double exp = s21_NAN;
    ck_assert_double_nan(s21_pow(base, exp));
    ck_assert_double_nan(pow(base, exp));

#test pow_test19
    long double base = 0.5591951;
    long double exp = -s21_INF;
    ck_assert_ldouble_infinite(pow(base, exp));
    ck_assert_ldouble_infinite(s21_pow(base, exp));

#test pow_test20
    long double base = 1.5591951;
    long double exp = -s21_INF;
    ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_test21
    long double base = 0.5591951;
    long double exp = s21_INF;
    ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_test22
    long double base = 1.5591951;
    long double exp = s21_INF;
    ck_assert_ldouble_infinite(s21_pow(base, exp));
    ck_assert_ldouble_infinite(pow(base, exp));

#test pow_test23
    long double base = s21_INF;
    long double exp = -1;
    ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_test24
    long double base = s21_INF;
    long double exp = 1;
    ck_assert_ldouble_infinite(s21_pow(base, exp));
    ck_assert_ldouble_infinite(pow(base, exp));

#test pow_test25
    ck_assert_ldouble_eq_tol(s21_pow(2, 18), pow(2, 18), 1e-6);
    ck_assert_ldouble_eq_tol(s21_pow(1.23456e-7, 2.21), pow(1.23456e-7, 2.21),
                           1e-6);
    
#test pow_test26
    long double orig_res = pow(2.1234567e-7, -2.45e4),
              our_res = s21_pow(2.1234567e-7, -2.45e4);
    int suc = 0;
    if (isinf(our_res) && isinf(orig_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test pow_test27
    ck_assert_ldouble_eq_tol(s21_pow(9.99999999e3, 9.95e-4),
                           pow(9.99999999e3, 9.95e-4), 1e-6);

#test pow_test28
    long double exp = -12;
    ck_assert_ldouble_infinite(s21_pow(+0, exp));
    ck_assert_ldouble_infinite(pow(+0, exp));

#test pow_test29
    long double exp = -12;
    ck_assert_ldouble_infinite(s21_pow(-0, exp));
    ck_assert_ldouble_infinite(pow(-0, exp));

#test pow_test30
    long double exp = s21_NAN;
    ck_assert_double_nan(s21_pow(+0, exp));
    ck_assert_double_nan(pow(+0, exp));

#test pow_test31
    long double exp = 2.456;
    ck_assert_ldouble_eq_tol(s21_pow(+0, exp), pow(+0, exp), 1e-6);

#test pow_test32
    long double exp = -s21_INF;
    ck_assert_ldouble_infinite(s21_pow(+0, exp));
    ck_assert_ldouble_infinite(pow(+0, exp));

#test pow_test33
    long double exp = 56;
    ck_assert_ldouble_eq_tol(s21_pow(+0, exp), pow(+0, exp), 1e-6);

#test pow_test34
    long double exp = 56;
    ck_assert_ldouble_eq_tol(s21_pow(-0, exp), pow(-0, exp), 1e-6);

#test pow_test35
    long double exp = 56.345;
    ck_assert_ldouble_eq_tol(s21_pow(-0, exp), pow(-0, exp), 1e-6);

#test pow_test36
    long double base;
    long double res1;
    long double res2;

    for (base = 0.0; base < 10; base += 0.1) {
      res1 = pow(base, -s21_INF);
      res2 = s21_pow(base, -s21_INF);
    }
    ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test sqrt_test1
    double num = s21_INF;
    long double orig_res = sqrt(num), our_res = s21_sqrt(num);
    int suc = 0;
    if (isinf(orig_res) && isinf(our_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test sqrt_test2
    double num = s21_NINF;
    long double orig_res = sqrt(num), our_res = s21_sqrt(num);
    int suc = 0;
    if (isnan(orig_res) && isnan(our_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test sqrt_test3
    double num = -15.01;
    ck_assert_ldouble_nan(s21_sqrt(num));
    ck_assert_ldouble_nan(sqrt(num));

#test sqrt_test4
    double num = 0.9999;
    long double orig_res = sqrt(num), our_res = s21_sqrt(num);
    int suc = 0;
    if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
    ck_assert_int_eq(1, suc);

#test sqrt_test5
    double num = NAN;
    long double orig_res = sqrt(num), our_res = s21_sqrt(num);
    int suc = 0;
    if (isnan(orig_res) && isnan(our_res)) suc = 1;
    ck_assert_int_eq(1, suc);

#test sqrt_test6
    ck_assert_ldouble_infinite(s21_sqrt(s21_INF));
    ck_assert_ldouble_infinite(sqrt(s21_INF));
    ck_assert_ldouble_nan(s21_sqrt(NAN));
    ck_assert_ldouble_nan(sqrt(NAN));
    ck_assert_ldouble_eq_tol(s21_sqrt(1.0), sqrt(1.0), 1e-6);
    ck_assert_ldouble_eq_tol(s21_sqrt(1.1), sqrt(1.1), 1e-6);
    ck_assert_ldouble_eq_tol(s21_sqrt(0.0), sqrt(0.0), 1e-6);
    ck_assert_ldouble_eq_tol(s21_sqrt(-0.0), sqrt(-0.0), 1e-6);
    ck_assert_ldouble_eq_tol(s21_sqrt(1), sqrt(1), 1e-6);
    ck_assert_ldouble_eq_tol(s21_sqrt(100), sqrt(100), 1e-6);
    ck_assert_ldouble_eq_tol(s21_sqrt(98765432.123), sqrt(98765432.123), 1e-6);
    ck_assert_ldouble_eq_tol(s21_sqrt(981.123e6), sqrt(981.123e6), 1e-6);
    ck_assert_ldouble_eq_tol(s21_sqrt(981.123e-15), sqrt(981.123e-15), 1e-6);